#!/usr/bin/env node

// HTTP Server

/**
 * Module dependencies.
 */

var {app,sessionParser} = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const wss = require('../wss');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
server.listen(port,()=>{
  console.log('HTTP Server Listen on port：',port, ', on all network interfaces');
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * HTTP Server Function
 */

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Error handler
 */
process.on('uncaughtException', function(err) {
  console.log('同步：',err);
  process.exit(1);
})
 
process.on('unhandledRejection', function(err) {
  console.log('非同步',err);
  process.exit(1)
})

/**
 * WebSocket session
 */

// 'upgrade' 事件 -  當瀏覽器請求WebSocket時觸發
server.on('upgrade', (request, socket, head) => {
  // 調用sessionParser取得Session
  sessionParser(request, {}, () => {
    // 要求WebSocketServer管理 'upgrade'
    wss.handleUpgrade(request, socket, head, (ws) => {
      // 觸發 'connection' 事件 (WebSocket 和 當前session)
      wss.emit('connection', ws, request.session)
    })
  })
})



